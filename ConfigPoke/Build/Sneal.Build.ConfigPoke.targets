<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

<!--
Include this targets file in your Visual Studio project file (csproj) using the following element:
<Import Project="Sneal.Build.ConfigPoke.targets" />

This targets file requires two item groups as input: ConfigTemplateFiles, and ConfigPropertyFiles.  These must be specified in your
MSBuild (csproj) project file.  Each ConfigTemplateFiles item should be the destination filename + some arbitrary extension, I
use '.template'.  You may also probably want set the "InProject" item meta data to false so these templates don't show up in VS 
solution explorer.

  <ItemGroup>
    <ConfigTemplateFiles Include="$(MSBuildProjectDirectory)\Configs\web.config.template">
      <InProject>false</InProject>
    </ConfigTemplateFiles>
    <ConfigTemplateFiles Include="$(MSBuildProjectDirectory)\Configs\windsor.config.template">
      <InProject>false</InProject>
    </ConfigTemplateFiles>	
  </ItemGroup>

  To create user and machine specific overrides, you can include a base properties file and then optionally include a per user and 
  per machine config, if they exist.  This would allow each developer to create their own override properties file which can then 
  be optionally checked into source control.  Here's how you would do that:
  
  <ItemGroup>
    <ConfigPropertyFiles Include="$(MSBuildProjectDirectory)\Properties\App.Properties.base">
      <InProject>false</InProject>
    </ConfigPropertyFiles>
    <ConfigPropertyFiles Include="$(MSBuildProjectDirectory)\Properties\App.Properties.$(USERNAME)" Condition="Exists('$(MSBuildProjectDirectory)\Properties\App.Properties.$(USERNAME)')">
      <InProject>false</InProject>
    </ConfigPropertyFiles>
    <ConfigPropertyFiles Include="$(MSBuildProjectDirectory)\Properties\App.Properties.$(COMPUTERNAME)" Condition="Exists('$(MSBuildProjectDirectory)\Properties\App.Properties.$(COMPUTERNAME)')">    
      <InProject>false</InProject>
    </ConfigPropertyFiles>
  </ItemGroup>

Optionally you can specify a ConfigPokeDirectory and a ConfigOutputDirectory property:

The ConfigPokeDirectory property should point to the directory where Sneal.Build.ConfigPoke.MSBuild.dll is located on your machine,
if not specified this property will default to the current MSBuild project file directory.

The ConfigOutputDirectory property should point to the directory where the output configuration files are written too.  If not
specified this property will default to the current MSBuild project file directory.
-->

  <PropertyGroup>
    <ConfigPokeDirectory Condition="'$(ConfigPokeDirectory)' == ''">$(MSBuildProjectDirectory)</ConfigPokeDirectory>
	<ConfigOutputDirectory Condition="'$(ConfigOutputDirectory)' == ''">$(MSBuildProjectDirectory)</ConfigOutputDirectory>
  </PropertyGroup>
  
  <UsingTask AssemblyFile="$(ConfigPokeDirectory)\Sneal.Build.ConfigPoke.MSBuild.dll"
           TaskName="Sneal.Build.ConfigPoke.MSBuild.ConfigPoke" />

  <!-- Append Configuration targets to existing VS targets -->
  <PropertyGroup>
    <CleanDependsOn>
      CleanConfiguration;$(CleanDependsOn)
    </CleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      BuildConfiguration;$(BuildDependsOn)
    </BuildDependsOn>
  </PropertyGroup>
  
  <Target Name="CleanConfiguration">
    <Delete Files="@(ConfigTemplateFiles->'$(ConfigOutputDirectory)\%(FileName)')" />
  </Target>

  <Target Name="BuildConfiguration" Inputs="@(ConfigTemplateFiles);@(ConfigPropertyFiles)" Outputs="@(ConfigTemplateFiles->'$(ConfigOutputDirectory)\%(FileName)')">
    <ConfigPoke TemplateConfig="%(ConfigTemplateFiles.FullPath)"
                DestConfig="$(ConfigOutputDirectory)\%(ConfigTemplateFiles.FileName)"
                PropertyFiles="@(ConfigPropertyFiles)" />  
  </Target>  
</Project>