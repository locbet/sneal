<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sneal.Core</name>
    </assembly>
    <members>
        <member name="T:Sneal.Core.IO.IFileSystem">
            <summary>
            Provides file and directory services to a permanent storage device.
            </summary>
            <remarks>
            Use this interface in your concrete classes to be able to stub external
            file system dependencies and actions.
            </remarks>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <returns><c>true</c> if the file exists, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="path">The name of the file to modify.</param>
            <param name="attributes">The attributes to set on the file.</param>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory and any parent directories if needed.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.EnsureDirectory(System.String)">
            <summary>
            Creates the specified directory only if it does not exist.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory, subdirectories, and file.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.DirectoryExists(System.String)">
            <summary>
            Checks whether the specified directory exists.
            </summary>
            <param name="path">The path of the directory to check</param>
            <returns><c>true</c> if the directory exists, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.GetFiles(System.String)">
            <summary>
            Gets all the files within the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>
            A String array containing the names of files in the specified directory
            that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets all the files within the specified directory that match the
            specified search pattern.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. The
            parameter cannot end in two periods ("..") or contain two periods
            ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, 
            nor can it contain any of the characters in InvalidPathChars.
            </param>
            <returns>
            A String array containing the names of files in the specified directory
            that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same
            name is not allowed.
            </summary>
            <param name="sourcePath">The file to copy.</param>
            <param name="targetPath">
            The name of the destination file. This cannot be a directory or an
            existing file.
            </param>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.CopyFile(System.String,System.String,Sneal.Core.IO.CopyOption)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same
            name is not allowed.
            </summary>
            <param name="sourcePath">The file to copy.</param>
            <param name="targetPath">The name of the destination file.</param>
            <param name="copyOption">Options for overwriting</param>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.CopyDirectory(System.String,System.String)">
            <summary>
            Recursively copies the source directory and all its content to the
            specified target directory.
            </summary>
            <param name="sourcePath">The source directory to copy.</param>
            <param name="targetPath">The destination path.</param>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.ReadAllBytes(System.String)">
            <summary>
            Reads the entire contents of the specified file into a byte array.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all the lines, then closes the file.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all the lines, then closes the file.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file,
            and then closes the file. If the target file already exists, it
            is overwritten.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, writes the specified string to the file, and
            then closes the file. If the target file already exists, it is overwritten.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, write the contents to the file, and then closes
            the file. If the target file already exists, it is overwritten.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.FindFile(System.String,System.String)">
            <summary>
            Recursively searches a directory and its children for the given file,
            returning the first occurance of the file, otherwise null.
            </summary>
            <param name="directory">The starting base directory</param>
            <param name="fileName">The file to search for</param>
            <returns>The full path to the file if found, otherwise null</returns>
        </member>
        <member name="M:Sneal.Core.IO.IFileSystem.FindFileInParent(System.String,System.String)">
            <summary>
            Iteratively searches a directory and its parents for the given file,
            returning the first occurance of the file, otherwise null.
            </summary>
            <param name="directory">The starting leaf directory</param>
            <param name="fileName">The file to search for</param>
            <returns>The full path to the file if found, otherwise null</returns>
        </member>
        <member name="T:Sneal.Core.Web.IHttpRequest">
            <summary>
            Represents an HTTP request.
            </summary>
        </member>
        <member name="M:Sneal.Core.Web.IHttpRequest.MapPath(System.String)">
            <summary>
            Maps the specified virtual path to a physical path.
            </summary>
            <param name="virtualPath">
            The virtual path (absolute or relative) for the current request.
            </param>
            <returns>The physical path on the server specified by virtualPath.</returns>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.Params">
            <summary>
            Gets a combined collection of QueryString, Form, ServerVariables, and Cookies items.
            </summary>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.Headers">
            <summary>
            Gets a collection of HTTP headers.
            </summary>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.QueryString">
            <summary>
            Gets the collection of HTTP query string variables.
            </summary>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.Form">
            <summary>
            Gets the collection of HTTP form string variables.
            </summary>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.Url">
            <summary>
            Gets information about the URL of the current request.
            </summary>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.ApplicationPath">
            <summary>
            Gets the ASP.NET application's virtual application root path on the server.
            </summary>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.PhysicalApplicationPath">
            <summary>
            Gets the physical file system path of the currently executing server 
            application's root directory.
            </summary>
        </member>
        <member name="P:Sneal.Core.Web.IHttpRequest.IsLocal">
            <summary>
            Gets a value indicating whether the request is from the local computer.
            </summary>
        </member>
        <member name="T:Sneal.Core.IO.IPathBuilder">
            <summary>
            Constructs and or modifies a file system path.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.Combine(System.String[])">
            <summary>
            Safely combines a Windows path, *nix path, or Uri.  The
            directory separator from the first path argument is used to combine
            the parts and replaces any separators in the rhs.
            </summary>
            <param name="paths">The path parts to join</param>
            <returns>The new combined path</returns>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.Normalize(System.String)">
            <summary>
            Removes any relative directory \..\ elements
            </summary>
            <param name="path">The path to act on.</param>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.MakeRelative(System.String,System.String)">
            <summary>
            Returns the relative part between two paths.
            </summary>
            <param name="basePath">The shorter, base path.</param>
            <param name="fullPath">The longer full path, which is a child of basePath</param>
            <returns>The relative part of the path</returns>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.EnsureDirectorySeparator(System.String,System.Char)">
            <summary>
            Ensures a given path is using the specified directory separator.
            </summary>
            <param name="path">The path string</param>
            <param name="dirSeparator">The directory separator to use</param>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.FileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string</param>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.FileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path string</param>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.FileExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">The path string</param>
            <returns></returns>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.DirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string
            </summary>
            <param name="path">The path string</param>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.RootDirectory(System.String)">
            <summary>
            Gets the root directory information of the specified path, i.e. c:\
            </summary>
            <param name="path">The path string</param>
            <returns>The drive</returns>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains
            absolute or relative path information.
            </summary>
            <param name="path">The path string</param>
            <returns><c>true</c> for fully qualified paths</returns>
        </member>
        <member name="M:Sneal.Core.IO.IPathBuilder.ChangeScheme(System.String,System.String)">
            <summary>
            Replaces the path scheme to the specified new scheme.
            </summary>
            <param name="path">The path to change</param>
            <param name="newScheme">The new scheme, i.e. http://</param>
            <returns>The path with the new scheme</returns>
        </member>
        <member name="T:Sneal.Core.IO.PathBuilder">
            <summary>
            Default path builder implmentation.
            </summary>
        </member>
        <member name="T:Sneal.Core.IO.FileSystem">
            <summary>
            Default file system implmentation for file and directory access.
            </summary>
            <remarks>
            Uses the default BCL file and directory IO methods wherever possible.
            </remarks>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.DeleteFile(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <returns><c>true</c> if the file exists, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="path">The name of the file to modify.</param>
            <param name="attributes">The attributes to set on the file.</param>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.GetAttributes(System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory and any parent directories if needed.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.EnsureDirectory(System.String)">
            <summary>
            Creates the specified directory only if it does not exist.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory, subdirectories, and file.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.DirectoryExists(System.String)">
            <summary>
            Checks whether the specified directory exists.
            </summary>
            <param name="path">The path of the directory to check</param>
            <returns><c>true</c> if the directory exists, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.GetFiles(System.String)">
            <summary>
            Gets all the files within the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>
            A String array containing the names of files in the specified directory
            that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets all the files within the specified directory that match the
            specified search pattern.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. The
            parameter cannot end in two periods ("..") or contain two periods
            ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, 
            nor can it contain any of the characters in InvalidPathChars.
            </param>
            <returns>
            A String array containing the names of files in the specified directory
            that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same
            name is not allowed.
            </summary>
            <param name="sourcePath">The file to copy.</param>
            <param name="targetPath">
            The name of the destination file. This cannot be a directory or an
            existing file.
            </param>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.CopyFile(System.String,System.String,Sneal.Core.IO.CopyOption)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same
            name is not allowed.
            </summary>
            <param name="sourcePath">The file to copy.</param>
            <param name="targetPath">The name of the destination file.</param>
            <param name="copyOption">Options for overwriting</param>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.CopyDirectory(System.String,System.String)">
            <summary>
            Recursively copies the source directory and all its content to the
            specified target directory.
            </summary>
            <param name="sourcePath">The source directory to copy.</param>
            <param name="targetPath">The destination path.</param>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.ReadAllBytes(System.String)">
            <summary>
            Reads the entire contents of the specified file into a byte array.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all the lines, then closes the file.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all the lines, then closes the file.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file,
            and then closes the file. If the target file already exists, it
            is overwritten.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, writes the specified string to the file, and
            then closes the file. If the target file already exists, it is overwritten.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, write the contents to the file, and then closes
            the file. If the target file already exists, it is overwritten.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.FindFile(System.String,System.String)">
            <summary>
            Recursively searches a directory and its children for the given file,
            returning the first occurance of the file, otherwise null.
            </summary>
            <param name="directory">The starting base directory</param>
            <param name="fileName">The file to search for</param>
            <returns>The full path to the file if found, otherwise null</returns>
        </member>
        <member name="M:Sneal.Core.IO.FileSystem.FindFileInParent(System.String,System.String)">
            <summary>
            Iteratively searches a directory and its parents for the given file,
            returning the first occurance of the file, otherwise null.
            </summary>
            <param name="directory">The starting leaf directory</param>
            <param name="fileName">The file to search for</param>
            <returns>The full path to the file if found, otherwise null</returns>
        </member>
        <member name="T:Sneal.Core.IO.FreeTcpPortFinder">
            <summary>
            Utility class used to find an available TCP port.
            </summary>
            <remarks>
            The dynamic port range is 49152–65535 by default.
            </remarks>
        </member>
        <member name="F:Sneal.Core.IO.FreeTcpPortFinder.MinPort">
            <summary>
            The minimum port number this class will consider, the default is 49152.
            </summary>
        </member>
        <member name="F:Sneal.Core.IO.FreeTcpPortFinder.MaxPort">
            <summary>
            The maximum port number this class will consider, the default is 65535.
            </summary>
        </member>
        <member name="M:Sneal.Core.IO.FreeTcpPortFinder.FindFreePort">
            <summary>
            Finds an unused port between MinPort and MaxPort.
            </summary>
            <returns>The port number</returns>
        </member>
        <member name="M:Sneal.Core.IO.FreeTcpPortFinder.FindFreePort(System.Int32)">
            <summary>
            Finds an unused port between MinPort and MaxPort. If the suggested
            port is available it is returned, otherwise a random available
            port is returned.
            </summary>
            <param name="suggestedPort">The port to try and use.</param>
            <returns>The port number</returns>
        </member>
        <member name="M:Sneal.Core.IO.FreeTcpPortFinder.IsPortAvailable(System.Int32)">
            <summary>
            Returns <c>false</c> if the port is in use.
            </summary>
            <param name="port">The port number to test.</param>
            <returns>True if nothing is listening on the specified port.</returns>
        </member>
        <member name="T:Sneal.Core.IO.CopyOption">
            <summary>
            File and directory action options.
            </summary>
        </member>
        <member name="F:Sneal.Core.IO.CopyOption.Overwrite">
            <summary>
            Do not overwrite the target if it exists.
            </summary>
        </member>
        <member name="F:Sneal.Core.IO.CopyOption.DoNotOverwrite">
            <summary>
            If the target exists, overwrite it.
            </summary>
        </member>
        <member name="T:Sneal.Core.Web.HttpRequestWrapper">
            <summary>
            Wraps a native ASP.NET request.
            </summary>
        </member>
        <member name="M:Sneal.Core.Web.HttpRequestWrapper.#ctor">
            <summary>
            Constructs a new HttpRequestWrapper that adapts the ASP.NET request
            from the current http context.
            </summary>
        </member>
        <member name="M:Sneal.Core.Web.HttpRequestWrapper.#ctor(System.Web.HttpRequest)">
            <summary>
            Constructs a new HttpRequestWrapper that adapts the specified ASP.NET request.
            </summary>
            <param name="request">An ASP.NET request</param>
        </member>
        <member name="P:Sneal.Core.Web.HttpRequestWrapper.Request">
            <summary>
            The wrapped ASP.NET request.
            </summary>
        </member>
        <member name="T:Sneal.Core.StringExtensions">
            <summary>
            Extension methods for the .NET string type.
            </summary>
        </member>
        <member name="M:Sneal.Core.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or string.Empty.
            </summary>
        </member>
        <member name="M:Sneal.Core.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            Formats the specifed string using named parameters.
            <example>Status.Text = "{UserName} last logged in at {LastLoginDate}".FormatWith(user);</example>
            </summary>
        </member>
        <member name="M:Sneal.Core.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object)">
            <summary>
            Formats the specifed string using named parameters.
            <example>Status.Text = "{UserName} last logged in at {LastLoginDate}".FormatWith(user);</example>
            </summary>
        </member>
        <member name="T:Sneal.Core.SequentialGuid">
            <summary>
            Guid factory for generating sequential Guids.
            </summary>
        </member>
        <member name="M:Sneal.Core.SequentialGuid.NewGuid">
            <summary>
            Creates a new sequential Guid using the Win32 UuidCreateSequential() method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sneal.Core.Collections.EnumerableExtensions">
            <summary>
            IEnumerable extension methods.
            </summary>
        </member>
        <member name="M:Sneal.Core.Collections.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates through each item and calls the specified action.
            </summary>
            <typeparam name="T">The type of the object to enumerate</typeparam>
            <param name="enumerable">The enumerable collection</param>
            <param name="action">The action to apply to each item in the collection</param>
        </member>
        <member name="T:Sneal.Core.Collections.CollectionExtensions">
            <summary>
            Extensions methods for ICollection.
            </summary>
        </member>
        <member name="M:Sneal.Core.Collections.CollectionExtensions.AddAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all items in the specified enumerable to the ICollection.
            </summary>
            <typeparam name="T">The type of the item to add</typeparam>
            <param name="self">The ICollection instance to add to</param>
            <param name="itemsToAdd">The enumerable items to add.</param>
        </member>
        <member name="T:Sneal.Core.LocalizableAttribute">
            <summary>
            Indicates that marked elements is localizable or not.
            </summary>
        </member>
        <member name="M:Sneal.Core.LocalizableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sneal.Core.LocalizableAttribute"/> class.
            </summary>
            <param name="isLocalizable"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Sneal.Core.LocalizableAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:Sneal.Core.LocalizableAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sneal.Core.LocalizableAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:Sneal.Core.LocalizableAttribute"/>.</returns>
        </member>
        <member name="P:Sneal.Core.LocalizableAttribute.IsLocalizable">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:Sneal.Core.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:Sneal.Core.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:Sneal.Core.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:Sneal.Core.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:Sneal.Core.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:Sneal.Core.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:Sneal.Core.AssertionConditionAttribute"/>
        </member>
        <member name="T:Sneal.Core.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:Sneal.Core.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:Sneal.Core.AssertionConditionType"/>
        </member>
        <member name="M:Sneal.Core.AssertionConditionAttribute.#ctor(Sneal.Core.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:Sneal.Core.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:Sneal.Core.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:Sneal.Core.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:Sneal.Core.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:Sneal.Core.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:Sneal.Core.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:Sneal.Core.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:Sneal.Core.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:Sneal.Core.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:Sneal.Core.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:Sneal.Core.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:Sneal.Core.BaseTypeRequiredAttribute.#ctor(System.Type[])">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseTypes">Specifies which types are required</param>
        </member>
        <member name="P:Sneal.Core.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:Sneal.Core.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:Sneal.Core.UsedImplicitlyAttribute.#ctor">
            <summary>
            Initializes new instance of UsedImplicitlyAttribute
            </summary>
        </member>
        <member name="M:Sneal.Core.UsedImplicitlyAttribute.#ctor(Sneal.Core.ImplicitUseFlags)">
            <summary>
            Initializes new instance of UsedImplicitlyAttribute with specified flags
            </summary>
            <param name="flags">Value of type <see cref="T:Sneal.Core.ImplicitUseFlags"/> indicating usage kind</param>
        </member>
        <member name="P:Sneal.Core.UsedImplicitlyAttribute.Flags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Sneal.Core.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:Sneal.Core.MeansImplicitUseAttribute.#ctor">
            <summary>
            Initializes new instance of MeansImplicitUseAttribute
            </summary>
        </member>
        <member name="M:Sneal.Core.MeansImplicitUseAttribute.#ctor(Sneal.Core.ImplicitUseFlags)">
            <summary>
            Initializes new instance of MeansImplicitUseAttribute with specified flags
            </summary>
            <param name="flags">Value of type <see cref="T:Sneal.Core.ImplicitUseFlags"/> indicating usage kind</param>
        </member>
        <member name="P:Sneal.Core.MeansImplicitUseAttribute.Flags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Sneal.Core.ImplicitUseFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:Sneal.Core.MeansImplicitUseAttribute"/> or <see cref="T:Sneal.Core.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Sneal.Core.ImplicitUseFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:Sneal.Core.ImplicitUseFlags.Initialize">
            <summary>
            Indicates implicit intialization of a member
            </summary>
        </member>
        <member name="F:Sneal.Core.ImplicitUseFlags.IncludeMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:Sneal.Core.Guard">
            <summary>
            Helper class for guard statements, which allow prettier
            code for guard clauses
            </summary>
        </member>
        <member name="M:Sneal.Core.Guard.AgainstNull``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Will throw a <see cref="T:System.ArgumentException"/> if the instance is null,
            with the specificied message.
            </summary>
            <param name="expression">An expression which contains the instance to test.</param>
            <example>
            Sample usage:
            <code>
            Guard.AgainstNull(() =&gt; myinstance));
            </code>
            </example>
        </member>
        <member name="M:Sneal.Core.Guard.AgainstNull(System.Object,System.String)">
            <summary>
            Will throw a <see cref="T:System.ArgumentException"/> if the instance is null,
            with the specificied message.
            </summary>
            <param name="instance">The instance to test</param>
            <param name="message">The exception message.</param>
            <example>
            Sample usage:
            <code>
            Guard.AgainstNull(myinstance, "This param cannot be null");
            </code>
            </example>
        </member>
        <member name="M:Sneal.Core.Guard.AgainstNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Will throw a <see cref="T:System.ArgumentException"/> if the instance is null or empty,
            with the specificied message.
            </summary>
            <param name="expression">An expression which contains the string instance</param>
            <example>
            Sample usage:
            <code>
            Guard.AgainstNullOrEmpty(() =&gt; mystring));
            </code>
            </example>
        </member>
        <member name="M:Sneal.Core.Guard.AgainstNullOrEmpty(System.String,System.String)">
            <summary>
            Will throw a <see cref="T:System.ArgumentException"/> if the instance is null or empty,
            with the specificied message.
            </summary>
            <param name="str">The string instance to test</param>
            <param name="message">The message.</param>
            <example>
            Sample usage:
            <code>
            Guard.AgainstNullOrEmpty(name), "Name must have a value");
            </code>
            </example>
        </member>
        <member name="M:Sneal.Core.Guard.Against(System.Boolean,System.String)">
            <summary>
            Will throw a <see cref="T:System.InvalidOperationException"/> if the assertion
            is true, with the specificied message.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <example>
            Sample usage:
            <code>
            Guard.Against(string.IsNullOrEmpty(name), "Name must have a value");
            </code>
            </example>
        </member>
        <member name="M:Sneal.Core.Guard.Against``1(System.Boolean,System.String)">
            <summary>
            Will throw exception of type <typeparamref name="TException"/>
            with the specified message if the assertion is true
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <example>
            Sample usage:
            <code>
            <![CDATA[
            Guard.Against<ArgumentException>(string.IsNullOrEmpty(name), "Name must have a value");
            ]]>
            </code>
            </example>
        </member>
    </members>
</doc>
